
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { toast } from "@/components/ui/use-toast";

const SUPABASE_URL = "https://lorfsjwndboeenamgwpq.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImxvcmZzanduZGJvZWVuYW1nd3BxIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDM4NDk5MzUsImV4cCI6MjA1OTQyNTkzNX0.EKztybh6VG1cfxXS2rCz9zgxaotRrBXIZLTBH56MjEQ";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Create a single instance of the Supabase client with options for better real-time performance
export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY,
  {
    realtime: {
      params: {
        eventsPerSecond: 10
      }
    },
    auth: {
      persistSession: true,
      autoRefreshToken: true,
      detectSessionInUrl: true
    },
    global: {
      headers: {
        'Content-Type': 'application/json',
        'X-Client-Info': 'retail-pulse-inventory-flow'
      },
    },
  }
);

// Test connection to Supabase on startup
(async () => {
  try {
    const { error } = await supabase.from('products').select('count', { count: 'exact', head: true });
    if (error) {
      console.error("Error connecting to Supabase:", error.message);
      console.error("Error details:", error);
      toast({
        title: "Database Connection Error",
        description: "Could not connect to the database. Some features may not work.",
        variant: "destructive"
      });
    } else {
      console.log("Successfully connected to Supabase");
      
      // Check if we're authenticated
      const { data: session } = await supabase.auth.getSession();
      console.log("Auth session status:", session ? "Authenticated" : "Not authenticated");
      
      // If not authenticated in development, create a temporary session for testing
      if (!session?.session && process.env.NODE_ENV === 'development') {
        console.log("Creating temporary anonymous session for development");
        // This ensures authentication doesn't block basic functionality during development
        await supabase.auth.signInWithPassword({
          email: 'dev@example.com',
          password: 'password123',
        }).catch(e => {
          console.log("Could not create temp session, continuing anonymously:", e);
        });
      }
    }
  } catch (err) {
    console.error("Supabase connection error:", err);
  }
})();

// Setup Supabase Realtime channels
(async () => {
  try {
    console.log("Setting up Supabase realtime channels...");
    // Enable realtime on the products table to ensure real-time updates
    await supabase
      .channel('schema-db-changes')
      .on('postgres_changes', { 
        event: '*', 
        schema: 'public', 
        table: 'products' 
      }, payload => {
        console.log('Supabase realtime event:', payload);
      })
      .subscribe(status => {
        console.log('Supabase realtime status:', status);
      });
  } catch (error) {
    console.error("Error setting up Supabase realtime:", error);
  }
})();
